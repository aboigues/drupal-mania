name: Selenium Tests

on:
  # Tests automatiques sur les PRs et pushes
  push:
    branches:
      - main
      - 'claude/**'

  pull_request:
    branches:
      - main

  # Permet de lancer manuellement les tests
  workflow_dispatch:

permissions:
  contents: read

jobs:
  selenium-tests:
    name: Run Selenium Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create required directories
        run: |
          mkdir -p data/postgres
          mkdir -p data/elasticsearch
          mkdir -p data/drupal/modules
          mkdir -p data/drupal/themes
          mkdir -p data/drupal/sites
          mkdir -p data/drupal/profiles

      - name: Create .env file
        run: |
          cat > .env <<EOF
          POSTGRES_DB=drupal_test
          POSTGRES_USER=drupal_test
          POSTGRES_PASSWORD=test_password_123
          DRUPAL_PORT=8080
          EOF

      - name: Start Docker Compose services
        run: |
          docker compose up -d
          echo "✅ Docker Compose services started"

      - name: Wait for PostgreSQL to be healthy
        run: |
          echo "⏳ Waiting for PostgreSQL to be ready..."
          timeout=60
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            if docker compose ps postgres | grep -q "healthy"; then
              echo "✅ PostgreSQL is healthy"
              break
            fi
            echo "Waiting... ($elapsed/$timeout seconds)"
            sleep 5
            elapsed=$((elapsed + 5))
          done

      - name: Wait for Elasticsearch to be healthy
        run: |
          echo "⏳ Waiting for Elasticsearch to be ready..."
          timeout=120
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            if docker compose ps elasticsearch | grep -q "healthy"; then
              echo "✅ Elasticsearch is healthy"
              break
            fi
            echo "Waiting... ($elapsed/$timeout seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done

      - name: Wait for Drupal to be ready
        run: |
          echo "⏳ Waiting for Drupal to be ready..."
          timeout=180
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            if curl -f http://localhost:8080 > /dev/null 2>&1; then
              echo "✅ Drupal is responding"
              break
            fi
            echo "Waiting... ($elapsed/$timeout seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done

          # Vérifier que Drupal répond
          if ! curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "❌ Drupal not responding after timeout"
            docker compose logs drupal
            exit 1
          fi

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Verify Chrome and ChromeDriver installation
        run: |
          google-chrome --version
          chromedriver --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/selenium/requirements.txt

      - name: Run Selenium tests
        env:
          DRUPAL_URL: http://localhost:8080
        run: |
          cd tests/selenium
          pytest test_drupal_basic.py -v -s --html=report.html --self-contained-html

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: selenium-test-report
          path: tests/selenium/report.html
          retention-days: 30

      - name: Display Docker logs on failure
        if: failure()
        run: |
          echo "📋 Drupal Logs:"
          docker compose logs drupal
          echo ""
          echo "📋 PostgreSQL Logs:"
          docker compose logs postgres
          echo ""
          echo "📋 Elasticsearch Logs:"
          docker compose logs elasticsearch

      - name: Stop Docker Compose services
        if: always()
        run: |
          docker compose down -v
          echo "🧹 Docker Compose services stopped and volumes removed"

      - name: Generate test summary
        if: always()
        run: |
          echo "# 🧪 Selenium Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Test completed at: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tests Executed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Page d'accueil Drupal" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Navigation utilisateur" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Temps de réponse" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Structure HTML" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All Selenium tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Check the logs and report artifact for details." >> $GITHUB_STEP_SUMMARY
          fi
